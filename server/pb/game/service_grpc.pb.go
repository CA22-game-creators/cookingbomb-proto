// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServicesClient is the client API for GameServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServicesClient interface {
	GameDataStream(ctx context.Context, opts ...grpc.CallOption) (GameServices_GameDataStreamClient, error)
}

type gameServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServicesClient(cc grpc.ClientConnInterface) GameServicesClient {
	return &gameServicesClient{cc}
}

func (c *gameServicesClient) GameDataStream(ctx context.Context, opts ...grpc.CallOption) (GameServices_GameDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameServices_ServiceDesc.Streams[0], "/proto.GameServices/GameDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServicesGameDataStreamClient{stream}
	return x, nil
}

type GameServices_GameDataStreamClient interface {
	Send(*GameDataRequest) error
	Recv() (*GameDataResponse, error)
	grpc.ClientStream
}

type gameServicesGameDataStreamClient struct {
	grpc.ClientStream
}

func (x *gameServicesGameDataStreamClient) Send(m *GameDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameServicesGameDataStreamClient) Recv() (*GameDataResponse, error) {
	m := new(GameDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServicesServer is the server API for GameServices service.
// All implementations should embed UnimplementedGameServicesServer
// for forward compatibility
type GameServicesServer interface {
	GameDataStream(GameServices_GameDataStreamServer) error
}

// UnimplementedGameServicesServer should be embedded to have forward compatible implementations.
type UnimplementedGameServicesServer struct {
}

func (UnimplementedGameServicesServer) GameDataStream(GameServices_GameDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GameDataStream not implemented")
}

// UnsafeGameServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServicesServer will
// result in compilation errors.
type UnsafeGameServicesServer interface {
	mustEmbedUnimplementedGameServicesServer()
}

func RegisterGameServicesServer(s grpc.ServiceRegistrar, srv GameServicesServer) {
	s.RegisterService(&GameServices_ServiceDesc, srv)
}

func _GameServices_GameDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServicesServer).GameDataStream(&gameServicesGameDataStreamServer{stream})
}

type GameServices_GameDataStreamServer interface {
	Send(*GameDataResponse) error
	Recv() (*GameDataRequest, error)
	grpc.ServerStream
}

type gameServicesGameDataStreamServer struct {
	grpc.ServerStream
}

func (x *gameServicesGameDataStreamServer) Send(m *GameDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameServicesGameDataStreamServer) Recv() (*GameDataRequest, error) {
	m := new(GameDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServices_ServiceDesc is the grpc.ServiceDesc for GameServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameServices",
	HandlerType: (*GameServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameDataStream",
			Handler:       _GameServices_GameDataStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game/service.proto",
}
