// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package match

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchServicesClient is the client API for MatchServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServicesClient interface {
	Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (MatchServices_MatchClient, error)
}

type matchServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServicesClient(cc grpc.ClientConnInterface) MatchServicesClient {
	return &matchServicesClient{cc}
}

func (c *matchServicesClient) Match(ctx context.Context, in *MatchRequest, opts ...grpc.CallOption) (MatchServices_MatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchServices_ServiceDesc.Streams[0], "/proto.MatchServices/Match", opts...)
	if err != nil {
		return nil, err
	}
	x := &matchServicesMatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchServices_MatchClient interface {
	Recv() (*MatchResponse, error)
	grpc.ClientStream
}

type matchServicesMatchClient struct {
	grpc.ClientStream
}

func (x *matchServicesMatchClient) Recv() (*MatchResponse, error) {
	m := new(MatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MatchServicesServer is the server API for MatchServices service.
// All implementations should embed UnimplementedMatchServicesServer
// for forward compatibility
type MatchServicesServer interface {
	Match(*MatchRequest, MatchServices_MatchServer) error
}

// UnimplementedMatchServicesServer should be embedded to have forward compatible implementations.
type UnimplementedMatchServicesServer struct {
}

func (UnimplementedMatchServicesServer) Match(*MatchRequest, MatchServices_MatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Match not implemented")
}

// UnsafeMatchServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServicesServer will
// result in compilation errors.
type UnsafeMatchServicesServer interface {
	mustEmbedUnimplementedMatchServicesServer()
}

func RegisterMatchServicesServer(s grpc.ServiceRegistrar, srv MatchServicesServer) {
	s.RegisterService(&MatchServices_ServiceDesc, srv)
}

func _MatchServices_Match_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchServicesServer).Match(m, &matchServicesMatchServer{stream})
}

type MatchServices_MatchServer interface {
	Send(*MatchResponse) error
	grpc.ServerStream
}

type matchServicesMatchServer struct {
	grpc.ServerStream
}

func (x *matchServicesMatchServer) Send(m *MatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MatchServices_ServiceDesc is the grpc.ServiceDesc for MatchServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MatchServices",
	HandlerType: (*MatchServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Match",
			Handler:       _MatchServices_Match_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/match/service.proto",
}
